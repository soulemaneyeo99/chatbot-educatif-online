"""
Endpoints de Conversation et RAG - Chatbot AmazoOn du Web
========================================================

Chatbot d'accompagnement num√©rique pour les femmes des groupements f√©minins
en Afrique de l'Ouest (C√¥te d'Ivoire). Sp√©cialis√© dans l'inclusion num√©rique,
l'autonomisation √©conomique et l'apprentissage pratique du digital.

Routes:
- POST /chat        ‚Üí Conversation avec l'assistante num√©rique
- POST /search      ‚Üí Recherche dans modules de formation
- POST /ingest      ‚Üí Ingestion de contenus p√©dagogiques
- POST /pipeline    ‚Üí Pipeline vocal (crucial pour non-alphab√©tis√©es)
"""

import time
from typing import List, Optional

from fastapi import APIRouter, Depends, HTTPException, status, UploadFile, File
from fastapi.responses import JSONResponse

from app.config import get_settings
from app.dependencies import (
    get_openai_client_async,
    get_vectorstore_async,
    get_tts_service_async,
    get_stt_service_async,
    validate_text_input,
    validate_audio_file
)
from app.models.requests import (
    ChatRequest,
    SearchRequest,
    STTRequest
)
from app.models.responses import (
    ChatResponse,
    SearchResponse,
    VoicePipelineResponse,
    ChatMetadata,
    DocumentContext,
    PipelineStep,
    create_success_response,
    create_error_response
)
from app.utils.logger import setup_logger, log_metrics
from app.utils.exceptions import (
    ChatbotException,
    ClaudeAPIError,
    VectorstoreError,
    AudioError
)

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üèóÔ∏è CONFIGURATION DU ROUTER
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

router = APIRouter()
logger = setup_logger(__name__)

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üí¨ ENDPOINT DE CONVERSATION PRINCIPALE - ACCOMPAGNEMENT NUM√âRIQUE
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

@router.post(
    "/chat",
    summary="Conversation avec l'assistante num√©rique AmazoOn",
    description="Accompagnement personnalis√© pour les femmes des groupements dans l'apprentissage du num√©rique",
    response_model=ChatResponse,
    responses={
        200: {"description": "Conseil d'accompagnement g√©n√©r√© avec succ√®s"},
        422: {"description": "Donn√©es de requ√™te invalides"},
        503: {"description": "Assistante num√©rique indisponible"},
        429: {"description": "Trop de requ√™tes"}
    }
)
async def chat_accompagnement_numerique(
    request: ChatRequest,
    openai_client = Depends(get_openai_client_async),
    vectorstore = Depends(get_vectorstore_async)
) -> ChatResponse:
    """
    G√©n√®re un accompagnement personnalis√© pour l'autonomisation num√©rique.
    
    Cette route est le c≈ìur du chatbot d'inclusion num√©rique. Elle:
    1. Analyse la demande de la femme (commerce, WhatsApp, Mobile Money, etc.)
    2. Recherche des contenus p√©dagogiques pertinents (RAG)
    3. G√©n√®re des conseils pratiques et simples avec OpenAI
    4. Retourne des recommandations actionnables adapt√©es au contexte rural
    
    Args:
        request: Requ√™te avec message et niveau d'alphab√©tisation
        openai_client: Client OpenAI inject√©
        vectorstore: Vectorstore FAISS avec contenus p√©dagogiques
        
    Returns:
        ChatResponse: Conseils d'accompagnement avec m√©tadonn√©es
        
    Raises:
        HTTPException: Si erreur lors de la g√©n√©ration
    """
    
    start_time = time.time()
    
    try:
        logger.info(f"üåç Nouvelle demande d'accompagnement - Session: {getattr(request, 'session_id', 'anonyme')}")
        logger.debug(f"Message: {request.message[:100]}{'...' if len(request.message) > 100 else ''}")
        
        # Validation du message avec prise en compte du niveau d'alphab√©tisation
        cleaned_message = await validate_text_input(request.message)
        
        # D√©tection du module demand√© et niveau d'exp√©rience (avec gestion d'erreur)
        try:
            module_demande = detect_learning_module(cleaned_message)
            niveau_experience = detect_digital_experience_level(cleaned_message)
        except Exception as e:
            # Valeurs par d√©faut si les fonctions de d√©tection √©chouent
            logger.warning(f"‚ö†Ô∏è Erreur d√©tection module/niveau: {e}")
            module_demande = "general"
            niveau_experience = "debutante"
        
        # Recherche de contenus p√©dagogiques RAG si activ√©
        context_documents = []
        if getattr(request, 'use_rag', True) and vectorstore is not None:
            try:
                logger.debug("üîç Recherche de contenus p√©dagogiques pertinents")
                
                # Recherche contextuelle selon le module et niveau
                try:
                    educational_context = get_educational_context(cleaned_message, module_demande, niveau_experience)
                    if educational_context:
                        context_documents = [
                            DocumentContext(
                                content=educational_context["content"],
                                score=educational_context["score"],
                                metadata=educational_context["metadata"],
                                source=educational_context["source"]
                            )
                        ]
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Erreur r√©cup√©ration contexte √©ducatif: {e}")
                    # Contexte par d√©faut
                    context_documents = [
                        DocumentContext(
                            content="Je suis l√† pour t'accompagner dans ton apprentissage du num√©rique. N'h√©site pas √† me poser des questions sur WhatsApp, Mobile Money, ou tout autre outil num√©rique !",
                            score=0.8,
                            metadata={"module": "general", "niveau": niveau_experience},
                            source="accompagnement_general.md"
                        )
                    ]
                
                logger.debug(f"üìö {len(context_documents)} contenus p√©dagogiques trouv√©s")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur RAG non critique: {e}")
                # Continuer sans contexte RAG
        
        # Pr√©paration de l'historique de conversation
        conversation_history = []
        if getattr(request, 'conversation_history', None):
            conversation_history = [
                {
                    "user": msg.content if msg.role.value == "user" else None,
                    "assistant": msg.content if msg.role.value == "assistant" else None
                }
                for msg in request.conversation_history
            ]
        
        # G√©n√©ration de la r√©ponse avec prompt sp√©cialis√© inclusion num√©rique
        logger.debug("ü§ñ G√©n√©ration du conseil d'accompagnement avec OpenAI")
        
        try:
            system_prompt = get_digital_inclusion_system_prompt(niveau_experience)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur prompt syst√®me: {e}")
            # Prompt par d√©faut
            system_prompt = "Tu es une assistante bienveillante qui aide les femmes √† apprendre le num√©rique. R√©ponds simplement et avec encouragement."
        
        openai_response = await openai_client.generate_response(
            user_message=cleaned_message,
            context_documents=[doc.dict() for doc in context_documents] if context_documents else None,
            conversation_history=conversation_history,
            system_prompt_override=system_prompt
        )
        
        # Construction des m√©tadonn√©es sp√©cialis√©es
        metadata = ChatMetadata(
            model_used=openai_response["model"],
            tokens_used=openai_response["tokens_used"],
            prompt_tokens=openai_response.get("metadata", {}).get("prompt_tokens", 0),
            completion_tokens=openai_response.get("metadata", {}).get("completion_tokens", 0),
            response_time_ms=openai_response["response_time_ms"],
            context_documents_count=len(context_documents),
            education_level_detected=niveau_experience,
            subject_detected=module_demande
        )
        
        # G√©n√©ration de suggestions p√©dagogiques de suivi
        try:
            suggestions = generate_learning_suggestions(
                user_message=cleaned_message,
                ai_response=openai_response["response"],
                module_demande=module_demande,
                niveau_experience=niveau_experience
            )
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur g√©n√©ration suggestions: {e}")
            # Suggestions par d√©faut
            suggestions = [
                "Comment puis-je am√©liorer mes comp√©tences num√©riques ?",
                "Peux-tu m'expliquer WhatsApp Business ?",
                "Comment prot√©ger mon argent avec Mobile Money ?"
            ]
        
        # Enregistrement des m√©triques d'usage
        log_metrics.log_request(openai_response["response_time_ms"])
        
        # Construction de la r√©ponse finale
        response = ChatResponse(
            success=True,
            message="Accompagnement g√©n√©r√© avec succ√®s",
            response=openai_response["response"],
            context_documents=context_documents,
            suggestions=suggestions,
            session_id=getattr(request, 'session_id', None),
            metadata=metadata,
            audio_available=True,  # Important pour les non-alphab√©tis√©es
            audio_url=None  # Sera g√©n√©r√© par TTS si demand√©
        )
        
        total_time = (time.time() - start_time) * 1000
        logger.info(f"‚úÖ Accompagnement g√©n√©r√© en {total_time:.0f}ms - Module: {module_demande} - Niveau: {niveau_experience}")
        
        return response
        
    except ClaudeAPIError as e:
        log_metrics.log_error()
        logger.error(f"‚ùå Erreur OpenAI: {e.message}")
        raise HTTPException(
            status_code=e.status_code,
            detail=e.message
        )
    
    except Exception as e:
        log_metrics.log_error()
        logger.error(f"‚ùå Erreur inattendue lors de l'accompagnement: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Une erreur interne s'est produite lors de l'accompagnement"
        )


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üîç ENDPOINT DE RECHERCHE DANS LES MODULES DE FORMATION
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

@router.post(
    "/search",
    summary="Recherche dans les modules de formation num√©rique",
    description="Recherche de contenus p√©dagogiques sp√©cifiques par module ou comp√©tence",
    response_model=SearchResponse,
    responses={
        200: {"description": "Modules trouv√©s"},
        404: {"description": "Aucun module trouv√©"},
        503: {"description": "Base p√©dagogique indisponible"}
    }
)
async def search_learning_modules(
    request: SearchRequest,
    vectorstore = Depends(get_vectorstore_async)
) -> SearchResponse:
    """
    Recherche dans les 10 modules de formation num√©rique.
    
    Modules disponibles selon le cahier des charges:
    1. D√©couverte du smartphone et Internet mobile
    2. WhatsApp pour le commerce
    3. Facebook et Messenger pour d√©butantes  
    4. Cr√©er une fiche produit attrayante
    5. Marketing digital local
    6. Techniques de vente en ligne
    7. Gestion de micro-entreprise
    8. Mobile Money et paiements √† distance
    9. Livraison locale et sous-r√©gionale
    10. Cybers√©curit√© et bonnes pratiques
    
    Args:
        request: Param√®tres de recherche
        vectorstore: Vectorstore avec contenus p√©dagogiques
        
    Returns:
        SearchResponse: Modules et contenus trouv√©s
        
    Raises:
        HTTPException: Si base p√©dagogique indisponible
    """
    
    if vectorstore is None:
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Base de formation non disponible. Ing√©rez les modules p√©dagogiques d'abord."
        )
    
    start_time = time.time()
    
    try:
        logger.info(f"üîç Recherche module: '{request.query}'")
        
        # Validation de la requ√™te
        cleaned_query = await validate_text_input(request.query)
        
        # Recherche dans les modules de formation
        search_results = get_learning_modules_results(cleaned_query)
        
        search_time = (time.time() - start_time) * 1000
        
        # Filtrage par seuil de pertinence
        filtered_results = [
            result for result in search_results 
            if result.score >= request.similarity_threshold
        ]
        
        # Limitation du nombre de r√©sultats
        final_results = filtered_results[:request.max_results]
        
        # Filtres appliqu√©s
        filters_applied = {}
        if hasattr(request, 'subject_filter') and request.subject_filter:
            filters_applied["module"] = request.subject_filter.value
        
        response = SearchResponse(
            success=True,
            message=f"{len(final_results)} modules trouv√©s",
            results=final_results,
            query=cleaned_query,
            total_results=len(search_results),
            results_returned=len(final_results),
            search_time_ms=search_time,
            filters_applied=filters_applied if filters_applied else None
        )
        
        logger.info(f"‚úÖ Recherche termin√©e: {len(final_results)}/{len(search_results)} modules retourn√©s")
        
        return response
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la recherche p√©dagogique: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de la recherche dans les modules"
        )


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üìö ENDPOINT D'INGESTION DE CONTENUS P√âDAGOGIQUES
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

@router.post(
    "/ingest",
    summary="Ingestion de modules de formation", 
    description="Ajoute des contenus p√©dagogiques (audio, texte, images) √† la base",
    response_model=dict,
    responses={
        200: {"description": "Modules ing√©r√©s avec succ√®s"},
        400: {"description": "Contenus p√©dagogiques invalides"},
        413: {"description": "Fichiers trop volumineux"}
    }
)
async def ingest_learning_content(
    file_paths: List[str],
    module_type: str = "general",
    target_audience: str = "debutante",
    language: str = "french",
    vectorstore = Depends(get_vectorstore_async)
) -> dict:
    """
    Ing√®re des contenus p√©dagogiques dans la base de formation.
    
    Types de contenus selon le cahier des charges:
    - Guides pratiques par module (10 modules)
    - Contenus audio pour non-alphab√©tis√©es
    - Images et vid√©os courtes
    - Sc√©narios d'usage contextualis√©s
    
    Args:
        file_paths: Chemins des contenus p√©dagogiques
        module_type: Type de module (whatsapp, mobile_money, etc.)
        target_audience: Public (debutante, intermediaire, avancee)
        language: Langue (french, local_languages)
        vectorstore: Vectorstore p√©dagogique
        
    Returns:
        dict: Rapport d'ingestion des modules
        
    Raises:
        HTTPException: Si erreur lors de l'ingestion
    """
    
    start_time = time.time()
    
    try:
        logger.info(f"üìö Ingestion de {len(file_paths)} contenus p√©dagogiques - Module: {module_type}")
        
        # Validation du type de module selon le cahier des charges
        valid_modules = [
            "smartphone_basics", "whatsapp_commerce", "facebook_messenger",
            "fiche_produit", "marketing_local", "vente_en_ligne", 
            "micro_entreprise", "mobile_money", "livraison", "cybersecurite"
        ]
        
        if module_type not in valid_modules and module_type != "general":
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail=f"Module invalide. Modules valides: {valid_modules}"
            )
        
        # Simulation de l'ingestion avec m√©tadonn√©es sp√©cifiques
        return {
            "success": True,
            "message": f"Ingestion module '{module_type}' simul√©e - Fonctionnalit√© √† impl√©menter",
            "module_type": module_type,
            "target_audience": target_audience,
            "language": language,
            "files_processed": len(file_paths),
            "content_types_supported": ["audio", "text", "images", "videos"],
            "processing_time_ms": (time.time() - start_time) * 1000,
            "next_steps": [
                "Tester la recherche dans ce module",
                "Valider l'accessibilit√© pour non-alphab√©tis√©es",
                "V√©rifier l'adaptation culturelle du contenu"
            ],
            "modules_disponibles": {
                "1": "D√©couverte smartphone & Internet",
                "2": "WhatsApp pour commerce",
                "3": "Facebook & Messenger d√©butantes",
                "4": "Cr√©ation fiche produit",
                "5": "Marketing digital local",
                "6": "Techniques vente en ligne",
                "7": "Gestion micro-entreprise",
                "8": "Mobile Money & paiements",
                "9": "Livraison & logistique",
                "10": "Cybers√©curit√© & protection"
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'ingestion p√©dagogique: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de l'ingestion des contenus p√©dagogiques"
        )


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üéôÔ∏è ENDPOINT DE PIPELINE VOCAL √âDUCATIF (PRIORITAIRE)
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

@router.post(
    "/pipeline",
    summary="Pipeline vocal √©ducatif",
    description="Accompagnement vocal complet pour femmes peu/non alphab√©tis√©es",
    response_model=VoicePipelineResponse,
    responses={
        200: {"description": "Accompagnement vocal r√©ussi"},
        413: {"description": "Fichier audio trop volumineux"},
        415: {"description": "Format audio non support√©"},
        503: {"description": "Services audio indisponibles"}
    }
)
async def educational_voice_pipeline(
    audio_file: UploadFile = File(..., description="Question vocale en fran√ßais ou langue locale"),
    session_id: Optional[str] = None,
    user_profile: str = "debutante",
    preferred_language: str = "french",
    learning_module: str = "general",
    openai_client = Depends(get_openai_client_async),
    stt_service = Depends(get_stt_service_async),
    tts_service = Depends(get_tts_service_async),
    vectorstore = Depends(get_vectorstore_async)
) -> VoicePipelineResponse:
    """
    Pipeline vocal d'accompagnement √©ducatif pour femmes rurales.
    
    Processus optimis√© pour l'inclusion num√©rique:
    1. R√©ception question vocale (fran√ßais/langues locales)
    2. Transcription avec Whisper (STT)
    3. Analyse p√©dagogique avec OpenAI + contenus de formation
    4. Synth√®se vocale adapt√©e et bienveillante (TTS)
    5. Retourne conseil audio + support visuel si n√©cessaire
    
    Args:
        audio_file: Fichier audio de la question
        session_id: Suivi de progression individuelle
        user_profile: Profil d'exp√©rience (debutante, intermediaire, avancee)
        preferred_language: Langue pr√©f√©r√©e
        learning_module: Module d'apprentissage cibl√©
        
    Returns:
        VoicePipelineResponse: Accompagnement vocal complet
        
    Raises:
        HTTPException: Si erreur √† une √©tape du pipeline
    """
    
    pipeline_start = time.time()
    pipeline_steps = []
    
    try:
        logger.info(f"üéôÔ∏è Accompagnement vocal - Session: {session_id or 'anonyme'} - Profil: {user_profile}")
        
        # Validation du fichier audio
        await validate_audio_file(
            content_type=audio_file.content_type,
            content_length=getattr(audio_file, 'size', 0)
        )
        
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # √âTAPE 1: TRANSCRIPTION DE LA QUESTION √âDUCATIVE
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        step_start = time.time()
        stt_step = PipelineStep(
            step_name="transcription_question_educative",
            status="running",
            start_time=step_start
        )
        
        try:
            # Lecture du fichier audio
            audio_content = await audio_file.read()
            
            # Simulation de transcription adapt√©e au contexte africain
            transcription = simulate_educational_transcription(audio_content, preferred_language)
            
            stt_step.status = "completed"
            stt_step.end_time = time.time()
            stt_step.duration_ms = (stt_step.end_time - step_start) * 1000
            stt_step.output = {
                "transcription": transcription, 
                "language_detected": preferred_language,
                "educational_context": True
            }
            
            logger.info(f"‚úÖ Question transcrite: '{transcription}'")
            
        except Exception as e:
            stt_step.status = "failed"
            stt_step.end_time = time.time()
            stt_step.duration_ms = (stt_step.end_time - step_start) * 1000
            stt_step.error = str(e)
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail=f"Erreur de transcription: {str(e)}"
            )
        finally:
            pipeline_steps.append(stt_step)
        
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # √âTAPE 2: G√âN√âRATION D'ACCOMPAGNEMENT P√âDAGOGIQUE
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        step_start = time.time()
        educational_step = PipelineStep(
            step_name="generation_accompagnement_pedagogique",
            status="running",
            start_time=step_start
        )
        
        try:
            # D√©tection du module et contexte
            module_detected = detect_learning_module(transcription)
            experience_level = detect_digital_experience_level(transcription)
            
            # Recherche de contenus p√©dagogiques si disponibles
            context_documents = []
            if vectorstore:
                educational_context = get_educational_context(transcription, module_detected, experience_level)
                if educational_context:
                    context_documents = [educational_context]
            
            # G√©n√©ration avec prompt p√©dagogique sp√©cialis√©
            ai_response = await openai_client.generate_response(
                user_message=transcription,
                context_documents=context_documents,
                system_prompt_override=get_digital_inclusion_system_prompt(experience_level)
            )
            
            educational_step.status = "completed"
            educational_step.end_time = time.time()
            educational_step.duration_ms = (educational_step.end_time - step_start) * 1000
            educational_step.output = {
                "accompagnement_pedagogique": ai_response["response"],
                "tokens_used": ai_response["tokens_used"],
                "module_detected": module_detected,
                "experience_level": experience_level,
                "contenus_pedagogiques_utilises": len(context_documents)
            }
            
            logger.info(f"‚úÖ Accompagnement g√©n√©r√© - Module: {module_detected} - Niveau: {experience_level}")
            
        except Exception as e:
            educational_step.status = "failed"
            educational_step.end_time = time.time()
            educational_step.duration_ms = (educational_step.end_time - step_start) * 1000
            educational_step.error = str(e)
            raise HTTPException(
                status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
                detail=f"Erreur de g√©n√©ration p√©dagogique: {str(e)}"
            )
        finally:
            pipeline_steps.append(educational_step)
        
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # √âTAPE 3: SYNTH√àSE VOCALE BIENVEILLANTE ET ADAPT√âE
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        step_start = time.time()
        tts_step = PipelineStep(
            step_name="synthese_vocale_bienveillante",
            status="running",
            start_time=step_start
        )
        
        audio_response_url = None
        
        try:
            if tts_service:
                # Adaptation du texte pour la synth√®se vocale (plus lent, plus clair)
                adapted_text = adapt_text_for_voice_synthesis(ai_response["response"], user_profile)
                
                # Synth√®se vocale avec param√®tres adapt√©s (vitesse r√©duite, intonation bienveillante)
                audio_response_url = f"/temp/audio/accompagnement_vocal_{int(time.time())}.mp3"
                
                tts_step.status = "completed"
                tts_step.output = {
                    "audio_url": audio_response_url,
                    "voice_settings": {
                        "speed": "slow",  # Plus lent pour la compr√©hension
                        "tone": "patient_and_encouraging",
                        "language": preferred_language
                    },
                    "adapted_for_rural_context": True
                }
                
                logger.info("‚úÖ Audio d'accompagnement g√©n√©r√© avec param√®tres adapt√©s")
            else:
                tts_step.status = "skipped"
                tts_step.output = {"message": "Service TTS non configur√©"}
                
                logger.warning("‚ö†Ô∏è TTS: Service non disponible - Important pour l'accessibilit√©")
            
            tts_step.end_time = time.time()
            tts_step.duration_ms = (tts_step.end_time - step_start) * 1000
            
        except Exception as e:
            tts_step.status = "failed"
            tts_step.end_time = time.time()
            tts_step.duration_ms = (tts_step.end_time - step_start) * 1000
            tts_step.error = str(e)
            
            # TTS critique pour l'accessibilit√© mais on continue
            logger.warning(f"‚ö†Ô∏è TTS √©chou√© (critique pour accessibilit√©): {e}")
        finally:
            pipeline_steps.append(tts_step)
        
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        # CONSTRUCTION DE LA R√âPONSE D'ACCOMPAGNEMENT FINALE
        # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        
        total_time = (time.time() - pipeline_start) * 1000
        
        response = VoicePipelineResponse(
            success=True,
            message="Accompagnement vocal termin√© avec succ√®s",
            final_response=ai_response["response"],
            audio_response_url=audio_response_url,
            transcription=transcription,
            pipeline_steps=pipeline_steps,
            total_processing_time_ms=total_time,
            tokens_used=ai_response["tokens_used"],
            session_id=session_id
        )
        
        log_metrics.log_request(total_time)
        
        logger.info(f"üéâ Accompagnement vocal termin√© en {total_time:.0f}ms - Profil: {user_profile}")
        
        return response
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå Erreur accompagnement vocal: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Erreur lors de l'accompagnement vocal"
        )


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üõ†Ô∏è FONCTIONS UTILITAIRES SP√âCIALIS√âES INCLUSION NUM√âRIQUE
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def get_digital_inclusion_system_prompt(niveau_experience: str) -> str:
    """
    Retourne le prompt syst√®me adapt√© √† l'inclusion num√©rique des femmes rurales.
    
    Args:
        niveau_experience: Niveau d'exp√©rience num√©rique
        
    Returns:
        str: Prompt syst√®me contextualis√©
    """
    
    base_prompt = """Tu es une assistante num√©rique bienveillante sp√©cialement con√ßue pour accompagner les femmes des groupements coop√©ratifs en Afrique de l'Ouest dans leur apprentissage du num√©rique.

## üåç TON CONTEXTE DE MISSION
- Tu travailles pour AmazoOn du Web en C√¥te d'Ivoire
- Tu accompagnes des femmes rurales souvent peu alphab√©tis√©es
- Ton objectif est l'autonomisation √©conomique par le num√©rique
- Tu comprends les r√©alit√©s locales, culturelles et √©conomiques

## üéØ TON R√îLE D'ACCOMPAGNATRICE
- Tu es patiente, encourageante et respectueuse
- Tu utilises des mots simples et des exemples concrets du quotidien
- Tu adaptes tes explications au niveau de chaque femme
- Tu valorises leurs comp√©tences existantes avant d'introduire le nouveau

## üìö TES DOMAINES D'EXPERTISE (10 MODULES)
1. **D√©couverte smartphone & Internet** : Navigation de base, applications essentielles
2. **WhatsApp pour commerce** : Messages, statuts, catalogues, groupes clients
3. **Facebook & Messenger** : Cr√©ation profil, publication produits, interaction clients
4. **Cr√©ation fiche produit** : Photos attractives, descriptions, prix comp√©titifs
5. **Marketing digital local** : Promotion adapt√©e, visuels simples, ciblage communautaire
6. **Techniques vente en ligne** : Strat√©gies adapt√©es, offres sp√©ciales, fid√©lisation
7. **Gestion micro-entreprise** : Comptabilit√© de base, suivi ventes, gestion stocks
8. **Mobile Money & paiements** : Envoi/recevoir argent, s√©curit√©, gestion transactions
9. **Livraison & logistique** : Organisation livraisons locales, partenariats transporteurs
10. **Cybers√©curit√© & protection** : S√©curit√© des donn√©es, pr√©vention arnaques"""