"""
Syst√®me de Logs du Chatbot √âducatif Vocal
=========================================

Module de logging avanc√© avec formatage color√©, rotation des fichiers,
et configuration adapt√©e pour le d√©veloppement et la production.

Utilisation:
    from app.utils.logger import setup_logger
    logger = setup_logger(__name__)
    logger.info("Message d'information")
"""

import logging
import logging.handlers
import sys
from pathlib import Path
from typing import Optional, Dict, Any
import json
from datetime import datetime
import traceback

from app.config import get_settings


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üé® COULEURS POUR LES LOGS CONSOLE
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

class LogColors:
    """Codes de couleurs ANSI pour les logs."""
    
    # Couleurs de base
    RESET = '\033[0m'
    BOLD = '\033[1m'
    DIM = '\033[2m'
    
    # Couleurs de texte
    BLACK = '\033[30m'
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    BLUE = '\033[34m'
    MAGENTA = '\033[35m'
    CYAN = '\033[36m'
    WHITE = '\033[37m'
    
    # Couleurs vives
    BRIGHT_RED = '\033[91m'
    BRIGHT_GREEN = '\033[92m'
    BRIGHT_YELLOW = '\033[93m'
    BRIGHT_BLUE = '\033[94m'
    BRIGHT_MAGENTA = '\033[95m'
    BRIGHT_CYAN = '\033[96m'
    
    # Couleurs de fond
    BG_RED = '\033[41m'
    BG_GREEN = '\033[42m'
    BG_YELLOW = '\033[43m'


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üéØ FORMATEURS PERSONNALIS√âS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

class ColoredFormatter(logging.Formatter):
    """Formateur avec couleurs pour la console."""
    
    # Mappage niveau -> couleur
    LEVEL_COLORS = {
        logging.DEBUG: LogColors.CYAN,
        logging.INFO: LogColors.GREEN,
        logging.WARNING: LogColors.YELLOW,
        logging.ERROR: LogColors.RED,
        logging.CRITICAL: LogColors.BRIGHT_RED + LogColors.BOLD,
    }
    
    def __init__(self, fmt: Optional[str] = None):
        super().__init__()
        self.fmt = fmt or "%(asctime)s | %(levelname)-8s | %(name)s | %(message)s"
    
    def format(self, record: logging.LogRecord) -> str:
        """Formate le log avec des couleurs."""
        
        # Couleur selon le niveau
        level_color = self.LEVEL_COLORS.get(record.levelno, LogColors.WHITE)
        
        # Formatage de base
        log_message = super().format(record)
        
        # Application des couleurs si on est dans un terminal
        if sys.stdout.isatty():
            # Coloration du niveau
            colored_level = f"{level_color}{record.levelname:<8}{LogColors.RESET}"
            log_message = log_message.replace(f"{record.levelname:<8}", colored_level)
            
            # Coloration du nom du module
            if record.name:
                colored_name = f"{LogColors.DIM}{record.name}{LogColors.RESET}"
                log_message = log_message.replace(record.name, colored_name)
            
            # Coloration sp√©ciale pour les erreurs critiques
            if record.levelno >= logging.CRITICAL:
                log_message = f"{LogColors.BG_RED}{LogColors.WHITE}{log_message}{LogColors.RESET}"
        
        return log_message


class JSONFormatter(logging.Formatter):
    """Formateur JSON pour les logs de production."""
    
    def format(self, record: logging.LogRecord) -> str:
        """Formate le log en JSON."""
        
        # Donn√©es de base
        log_data = {
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "level": record.levelname,
            "logger": record.name,
            "message": record.getMessage(),
            "module": record.module,
            "function": record.funcName,
            "line": record.lineno,
        }
        
        # Ajout de l'exception si pr√©sente
        if record.exc_info:
            log_data["exception"] = {
                "type": record.exc_info[0].__name__,
                "message": str(record.exc_info[1]),
                "traceback": traceback.format_exception(*record.exc_info)
            }
        
        # Ajout des donn√©es extra si pr√©sentes
        if hasattr(record, 'request_id'):
            log_data["request_id"] = record.request_id
        
        if hasattr(record, 'user_id'):
            log_data["user_id"] = record.user_id
        
        if hasattr(record, 'duration'):
            log_data["duration_ms"] = record.duration
        
        return json.dumps(log_data, ensure_ascii=False)


class ContextFilter(logging.Filter):
    """Filtre pour ajouter du contexte aux logs."""
    
    def filter(self, record: logging.LogRecord) -> bool:
        """Ajoute des informations contextuelles au log."""
        
        # Ajout du nom de l'application
        record.app_name = "chatbot-educatif"
        
        # Ajout de l'environnement
        settings = get_settings()
        record.environment = settings.ENVIRONMENT
        
        return True


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üèóÔ∏è CONFIGURATION DU SYST√àME DE LOGS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def setup_logger(
    name: str,
    level: Optional[str] = None,
    format_string: Optional[str] = None,
    log_file: Optional[str] = None
) -> logging.Logger:
    """
    Configure et retourne un logger personnalis√©.
    
    Args:
        name: Nom du logger (g√©n√©ralement __name__)
        level: Niveau de log (DEBUG, INFO, WARNING, ERROR, CRITICAL)
        format_string: Format personnalis√© des logs
        log_file: Fichier de log optionnel
        
    Returns:
        logging.Logger: Logger configur√©
        
    Example:
        logger = setup_logger(__name__)
        logger.info("Application d√©marr√©e")
    """
    
    settings = get_settings()
    
    # Configuration du logger
    logger = logging.getLogger(name)
    
    # √âviter la duplication des handlers
    if logger.hasHandlers():
        logger.handlers.clear()
    
    # Niveau de log
    log_level = level or settings.LOG_LEVEL
    logger.setLevel(getattr(logging, log_level.upper(), logging.INFO))
    
    # Filtre contextuel
    context_filter = ContextFilter()
    logger.addFilter(context_filter)
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üñ•Ô∏è HANDLER CONSOLE
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    console_handler = logging.StreamHandler(sys.stdout)
    
    if settings.is_production:
        # Format JSON en production
        console_formatter = JSONFormatter()
    else:
        # Format color√© en d√©veloppement
        console_formatter = ColoredFormatter(
            format_string or settings.LOG_FORMAT
        )
    
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)
    
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    # üìÅ HANDLER FICHIER (si configur√©)
    # ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    
    log_file_path = log_file or settings.LOG_FILE
    if log_file_path:
        
        # Cr√©ation du r√©pertoire de logs
        log_path = Path(log_file_path)
        log_path.parent.mkdir(parents=True, exist_ok=True)
        
        # Handler avec rotation
        file_handler = logging.handlers.RotatingFileHandler(
            log_path,
            maxBytes=10 * 1024 * 1024,  # 10 MB
            backupCount=5,
            encoding='utf-8'
        )
        
        # Format JSON pour les fichiers
        file_formatter = JSONFormatter()
        file_handler.setFormatter(file_formatter)
        
        logger.addHandler(file_handler)
    
    return logger


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üéõÔ∏è LOGGER SP√âCIALIS√âS
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def get_api_logger() -> logging.Logger:
    """Logger sp√©cialis√© pour les appels API."""
    logger = setup_logger("chatbot.api")
    return logger


def get_claude_logger() -> logging.Logger:
    """Logger sp√©cialis√© pour Claude API."""
    logger = setup_logger("chatbot.claude")
    return logger


def get_audio_logger() -> logging.Logger:
    """Logger sp√©cialis√© pour l'audio (STT/TTS)."""
    logger = setup_logger("chatbot.audio")
    return logger


def get_rag_logger() -> logging.Logger:
    """Logger sp√©cialis√© pour le syst√®me RAG."""
    logger = setup_logger("chatbot.rag")
    return logger


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üìä M√âTRIQUES ET MONITORING
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

class LogMetrics:
    """Collecteur de m√©triques bas√© sur les logs."""
    
    def __init__(self):
        self.metrics: Dict[str, Any] = {
            "requests_total": 0,
            "errors_total": 0,
            "claude_calls": 0,
            "tts_calls": 0,
            "stt_calls": 0,
            "average_response_time": 0.0
        }
        self.response_times = []
    
    def log_request(self, duration_ms: float):
        """Enregistre une requ√™te."""
        self.metrics["requests_total"] += 1
        self.response_times.append(duration_ms)
        
        # Calcul de la moyenne glissante (100 derni√®res requ√™tes)
        if len(self.response_times) > 100:
            self.response_times = self.response_times[-100:]
        
        self.metrics["average_response_time"] = sum(self.response_times) / len(self.response_times)
    
    def log_error(self):
        """Enregistre une erreur."""
        self.metrics["errors_total"] += 1
    
    def log_claude_call(self):
        """Enregistre un appel Claude."""
        self.metrics["claude_calls"] += 1
    
    def log_tts_call(self):
        """Enregistre un appel TTS."""
        self.metrics["tts_calls"] += 1
    
    def log_stt_call(self):
        """Enregistre un appel STT."""
        self.metrics["stt_calls"] += 1
    
    def get_metrics(self) -> Dict[str, Any]:
        """Retourne les m√©triques actuelles."""
        return self.metrics.copy()
    
    def reset_metrics(self):
        """Remet √† z√©ro les m√©triques."""
        self.__init__()


# Instance globale des m√©triques
log_metrics = LogMetrics()


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üîß FONCTIONS UTILITAIRES
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def log_function_call(func_name: str, args: tuple = (), kwargs: dict = None):
    """
    D√©corateur pour logger automatiquement les appels de fonction.
    
    Args:
        func_name: Nom de la fonction
        args: Arguments positionnels
        kwargs: Arguments par mots-cl√©s
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            logger = setup_logger(func.__module__)
            
            # Log de l'entr√©e
            logger.debug(f"üîµ Appel de {func_name}(args={args}, kwargs={kwargs})")
            
            start_time = datetime.now()
            
            try:
                result = func(*args, **kwargs)
                
                # Calcul du temps d'ex√©cution
                duration = (datetime.now() - start_time).total_seconds() * 1000
                
                logger.debug(f"‚úÖ {func_name} termin√© en {duration:.2f}ms")
                return result
                
            except Exception as e:
                duration = (datetime.now() - start_time).total_seconds() * 1000
                logger.error(f"‚ùå {func_name} √©chou√© en {duration:.2f}ms: {e}")
                raise
        
        return wrapper
    return decorator


def log_with_context(logger: logging.Logger, level: str, message: str, **context):
    """
    Log un message avec du contexte suppl√©mentaire.
    
    Args:
        logger: Instance du logger
        level: Niveau de log (info, warning, error, etc.)
        message: Message √† logger
        **context: Contexte suppl√©mentaire
        
    Example:
        log_with_context(
            logger, "info", "Utilisateur connect√©",
            user_id="123", ip="192.168.1.1"
        )
    """
    
    # Cr√©ation d'un LogRecord avec contexte
    record = logger.makeRecord(
        name=logger.name,
        level=getattr(logging, level.upper()),
        fn="",
        lno=0,
        msg=message,
        args=(),
        exc_info=None
    )
    
    # Ajout du contexte
    for key, value in context.items():
        setattr(record, key, value)
    
    logger.handle(record)


def setup_structured_logging():
    """
    Configure le logging structur√© pour toute l'application.
    √Ä appeler au d√©marrage de l'application.
    """
    
    settings = get_settings()
    
    # Configuration du logger racine
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.WARNING)  # Silencer les libs externes
    
    # Logger principal de l'application
    app_logger = setup_logger("chatbot")
    
    # Loggers sp√©cialis√©s
    setup_logger("chatbot.api")
    setup_logger("chatbot.claude") 
    setup_logger("chatbot.audio")
    setup_logger("chatbot.rag")
    
    app_logger.info(f"üéØ Logging configur√© - Niveau: {settings.LOG_LEVEL}")
    
    return app_logger


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# üß™ FONCTION DE TEST
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def test_logging():
    """Teste tous les niveaux de log avec des exemples."""
    
    logger = setup_logger("test_logger")
    
    logger.debug("üîç Message de d√©bogage")
    logger.info("‚ÑπÔ∏è Information g√©n√©rale")
    logger.warning("‚ö†Ô∏è Avertissement important")
    logger.error("‚ùå Erreur survenue")
    logger.critical("üö® Erreur critique!")
    
    # Test avec contexte
    log_with_context(
        logger, "info", "Test avec contexte",
        request_id="req-123",
        user_id="user-456",
        duration=125.5
    )
    
    # Test d'exception
    try:
        raise ValueError("Erreur de test")
    except Exception as e:
        logger.exception("Exception captur√©e")
    
    print("\n‚úÖ Test du syst√®me de logs termin√©!")


if __name__ == "__main__":
    test_logging()